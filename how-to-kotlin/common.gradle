// overrides default "build"
buildDir file("target")

java {
    sourceCompatibility = JavaVersion.VERSION_17 // JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_17 // JavaVersion.VERSION_11
}

ext {
    ktLintOpts = [
        "--reporter=plain",
        "--reporter=checkstyle,output=${buildDir}/ktlint-report.xml"
    ]
    mainSourceDir = file("/src/main/kotlin")
    classesDir = file("${buildDir}/classes")
    docsDir = file("${buildDir}/doc")

    ktlintHome = System.getenv("KTLINT_HOME")
    if (!project.hasProperty("ktlintHome")) {
        throw new GradleException("Variable KTLINT_HOME is undefined")
    }
    userHome = System.getProperty("user.home")
    repoDir = file("${userHome}/.m2/repository")
    libDir  = file("${userHome}/AppData/Local/Temp/lib")

    pluginsClasspath = files(
        "${repoDir}/org/jetbrains/kotlinx/kotlinx-coroutines-core/${kotlinxVersion}/kotlinx-coroutines-core-${kotlinxVersion}.jar",
        "${libDir}/kotlinx-html-jvm-${kotlinxHtmlVersion}.jar",
        "${libDir}/kotlin-analysis-compiler-${kotlinVersion}.jar",
        "${libDir}/kotlin-analysis-intellij-${kotlinVersion}.jar",
        "${libDir}/dokka-analysis-${kotlinVersion}.jar",
        "${libDir}/dokka-base-${kotlinVersion}.jar"
    )

    kotlinMain = "Main"
    if (project.hasProperty("mainClassName") && mainClassName?.trim()) kotlinMain = mainClassName

    javaMain = "Main"
    if (project.hasProperty("javaMainClassName") && javaMainClassName?.trim()) javaMain = javaMainClassName
}

detekt {
    config = files("../detekt-config.yml")
    reports {
        // see https://detekt.github.io/detekt/reporting.html
        html {
            enabled = false
        }
        sarif {
            enabled = false
        }
        txt {
            enabled = true
            destination = file("${buildDir}/detekt-report.txt")
        }
        xml {
            enabled = false
        }
    }
}

sourceSets {
    // Default: srcDirs "src/main/kotlin"
    main.kotlin.srcDirs mainSourceDir
}

clean.doLast {
    buildDir.deleteDir()
}

task lint(type: JavaExec) {
    description "Analyze Kotlin source files with KtLint"
    mainClass = "-jar"
    args "${ktlintHome}/ktlint.jar " + ktLintOpts + sourceSets.main.allSource.files
}

checkstyle {
    maxErrors = 10
}

compileKotlin {
    // dependsOn lint

    description "Compile Kotlin source files"

    kotlinOptions {
        // Tool options
        // suppressWarnings = true
        // verbose = false
        // Common options
        apiVersion = "1.6"
        languageVersion = "1.8"
        // JVM options
        jvmTarget = "17"  // "11", "1.8"
    }
}

compileKotlin.doFirst {
    if (!classesDir.exists()) classesDir.mkdirs()
}

build {
    dependsOn compileKotlin
}

// see https://github.com/Kotlin/dokka#using-dokka
dokkaHtml.configure {
    outputDirectory = file("$buildDir/dokka")
    dokkaSourceSets {
        configureEach {
            // Do not output deprecated members. Applies globally, can be overridden by packageOptions
            skipDeprecated.set(false)
            // Used for linking to JDK documentation
            jdkVersion.set(11)
        }
    }
}

task run(type: JavaExec) {
    dependsOn compileKotlin

    description "Execute Kotlin main class $kotlinMain"

    classpath sourceSets.main.runtimeClasspath

    mainClass = kotlinMain
    if (args == null) args ""
}

repositories {
    mavenCentral()
    maven { // e.g. dokka-gradle-plugin
        url "https://dl.bintray.com/kotlin/dokka"
    }
    maven { // e.g. kotlinx-html-jvm
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
    maven {
        url "https://dl.bintray.com/kotlin/kotlin-dev"
    }
    maven {
        url "https://dl.bintray.com/jetbrains/markdown"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    // implementation "org.jetbrains.dokka:kotlin-analysis-compiler:$dokkaVersion"
    // implementation "org.jetbrains.dokka:kotlin-analysis-intellij:$dokkaVersion"
    implementation "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
    implementation "org.jetbrains:markdown:0.7.3"
    //dokkaGfmPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:$dokkaVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    api "junit:junit:$junitVersion"
    testImplementation "junit:junit:$junitVersion"
}
